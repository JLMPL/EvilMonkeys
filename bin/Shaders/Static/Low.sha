#shader vertex
#version 130

in vec3 vertexPos;
in vec3 vertexNormal;
in vec4 vertexColor;
in vec2 vertexCoord;
in vec3 vertexTangent;
in vec3 vertexBiTangent;

out vec2 fragmentCoord;
out vec4 fragmentColor;

uniform mat4 projection;
uniform mat4 view;
uniform mat4 model;

uniform vec3 sunDirection;
uniform vec3 sunColor;
uniform vec3 ambientColor;

uniform vec4 clipPlane;

void main()
{
    vec4 worldPos = model * vec4(vertexPos, 1);
    gl_Position = projection * view * worldPos;

    gl_ClipDistance[0] = dot(worldPos, clipPlane);

    vec3 fragmentNormal = vec3(model * vec4(vertexNormal, 0));
    vec3 light = sunColor * dot(fragmentNormal, -sunDirection);
    light = max(ambientColor, light);

    fragmentColor = vertexColor * vec4(light, 1.f);
    fragmentCoord = vertexCoord;
}

#shader fragment
#version 130

in vec2 fragmentCoord;
in vec4 fragmentColor;

out vec4 outColor;

uniform sampler2D image;

const float gamma = 2.2f;

void main()
{
    vec4 texColor = texture(image, fragmentCoord);
    texColor.rgb = pow(texColor.rgb, vec3(gamma));

    vec4 ass = texColor * fragmentColor;

    outColor = vec4(1.f);
    outColor.rgb = pow(ass.rgb, vec3(1.0/gamma));
}
