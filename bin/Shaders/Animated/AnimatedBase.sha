#shader vertex
#version 130

in vec3 vertexPos;
in vec3 vertexNormal;
in vec4 vertexColor;
in vec2 vertexCoord;
in ivec4 boneIndices;
in vec4 weights;
in vec3 vertexTangent;
in vec3 vertexBiTangent;

out vec3 fragPos;
out vec4 fragColor;
out vec2 fragCoord;
out mat3 fragToTan;
out vec3 shadowSpacePos;

uniform mat4 uProj;
uniform mat4 uView;
uniform mat4 uModel;
uniform mat4 uShadow;

#define NUM_BONES 64
uniform mat4 bones[NUM_BONES];

void main()
{
    mat4 boneTransform = bones[boneIndices[0]] * weights[0];
    boneTransform += bones[boneIndices[1]]     * weights[1];
    boneTransform += bones[boneIndices[2]]     * weights[2];
    boneTransform += bones[boneIndices[3]]     * weights[3];

    mat4 boneModel = uModel * boneTransform;
    vec4 worldPos = boneModel * vec4(vertexPos, 1);

    gl_Position = uProj * uView * worldPos;

    fragPos = worldPos.xyz;
    fragColor = vertexColor;
    fragCoord = vertexCoord;

    shadowSpacePos = vec3(uShadow * worldPos);

    mat3 correct = mat3(boneModel);
    vec3 worldNormal = correct * vertexNormal;
    vec3 worldTangent = correct * vertexTangent;
    vec3 worldBiTangent = correct * vertexBiTangent;

    fragToTan = transpose(mat3(
        worldTangent.x, worldBiTangent.x, worldNormal.x,
        worldTangent.y, worldBiTangent.y, worldNormal.y,
        worldTangent.z, worldBiTangent.z, worldNormal.z
    ));
}

#shader fragment
#version 130

in vec3 fragPos;
in vec4 fragColor;
in vec2 fragCoord;
in mat3 fragToTan;
in vec3 shadowSpacePos;

out vec4 outColor;

uniform sampler2DShadow uShadowMap;
uniform sampler2D uImage;

float sunShadow()
{
    return shadow2D(uShadowMap, vec3(shadowSpacePos.xy, shadowSpacePos.z - 0.0005)).r;
}

vec3 correct(vec3 color)
{
    float gamma = 2.2;
    vec3 mapped = color / (color + vec3(1.0));
    return pow(mapped, vec3(1.0/gamma));
}

void main()
{
    vec3 light = normalize(vec3(1,1,1));

    vec3 ambient = vec3(0.2,0.2,0.3);

    vec3 normal = fragToTan * vec3(0,0,1);
    vec3 diffuse = vec3(max(dot(normal, light), 0)) * vec3(2);

    vec3 color = ambient + diffuse * sunShadow();

    color *= pow(texture(uImage, fragCoord).rgb, vec3(2.2));

    outColor = vec4(correct(color), 1);
}

