#shader vertex
#version 130

in vec2 vertexPos;
in vec2 vertexCoord;

out vec2 fragmentCoord;

void main()
{
    gl_Position = vec4(vertexPos, 0, 1);
    fragmentCoord = vertexCoord;
}

#shader fragment
#version 130

in vec2 fragmentCoord;

out vec4 outColor;

uniform sampler2D inDepth;
uniform sampler2D inAlbedo;
uniform sampler2D inMaterials;
uniform sampler2D inNormals;

uniform samplerCube inIrradiance;
uniform samplerCube inPrefilterMap;
uniform sampler2D brdfLUT;

uniform sampler2DShadow shadowMap;
// uniform samplerCube shadowMap;

uniform vec3 camPos;
uniform mat4 shadowMatrix;

uniform mat4 invProj;
uniform mat4 invView;

const float PI = 3.14159265359;

#if 1
float sunShadows(vec3 shadowSpacePos)
{
    return shadow2D(shadowMap, vec3(shadowSpacePos.xy, shadowSpacePos.z - 0.001)).r;
}
#else
float pointShadow(vec3 worldPos)
{
    vec3 dir = worldPos - vec3(10,10,10);

    float worldDist = length(dir);
    float shadowDist = texture(shadowMap, normalize(dir)).r;

    return (worldDist < shadowDist) ? 1.f : 0.f;
}
#endif

float distributionGGX(vec3 normal, vec3 H, float roughness)
{
    float a      = roughness * roughness;
    float a2     = a * a;
    float NdotH  = max(dot(normal, H), 0.0);
    float NdotH2 = NdotH * NdotH;

    float nom   = a2;
    float denom = (NdotH2 * (a2 - 1.0) + 1.0);
    denom = PI * denom * denom;

    return nom / denom;
}

float geometrySchlickGGX(float NdotV, float roughness)
{
    float r = (roughness + 1.0);
    float k = (r*r) / 8.0;

    float nom = NdotV;
    float denom = NdotV * (1.0 - k) + k;

    return nom / denom;
}

float geometrySmith(vec3 N, vec3 V, vec3 L, float roughness)
{
    float NdotV = max(dot(N, V), 0.0);
    float NdotL = max(dot(N, L), 0.0);
    float ggx2 = geometrySchlickGGX(NdotV, roughness);
    float ggx1 = geometrySchlickGGX(NdotL, roughness);

    return ggx1 * ggx2;
}

vec3 fresnelSchlickRoughness(float cosTheta, vec3 F0, float roughness)
{
    return F0 + (max(vec3(1.0 - roughness), F0) - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 fresnelSchlick(float cosTheta, vec3 F0)
{
    return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0);
}

vec3 lightPositions[4];
vec3 lightColors[4];

vec3 worldPosFromDepth(float depth)
{
    float z = depth * 2.0 - 1.0;

    vec4 clipSpacePosition = vec4(fragmentCoord * 2.0 - 1.0, z, 1);
    vec4 viewSpacePosition = invProj * clipSpacePosition;

    viewSpacePosition /= viewSpacePosition.w;

    vec4 worldSpacePosition = invView * viewSpacePosition;

    return worldSpacePosition.xyz;
}

void main()
{
    lightPositions[0] = vec3(10,10,10);
    lightColors[0] = vec3(500);

    lightPositions[1] = vec3(-10,10,-10);
    lightColors[1] = vec3(500);

    lightPositions[2] = vec3(-10,10,10);
    lightColors[2] = vec3(500);

    lightPositions[3] = vec3(10,10,-10);
    lightColors[3] = vec3(500);

    vec3 sunDirection = normalize(vec3(1,1,1));

    //

    vec3 worldPos = worldPosFromDepth(texture(inDepth, fragmentCoord).r);

    vec4 texColor = texture(inAlbedo, fragmentCoord);
    vec3 albedo = pow(texColor.xyz, vec3(2.2));
    float ao = texColor.a;

    vec2 mats = texture(inMaterials, fragmentCoord).rg;
    float metallic  = mats.x;
    float roughness = clamp(mats.y, 0.05, 1.0);

    if (albedo == vec3(0) && mats == vec2(0))
        discard;

    vec3 normal = texture(inNormals, fragmentCoord).rgb;
    normal = (normal * 2) - 1;

    vec3 shadowSpacePos = vec3(shadowMatrix * vec4(worldPos, 1));

    vec3 toCam = normalize(camPos - worldPos);
    vec3 reflected = reflect(-toCam, normal);

    vec3 N = normal;
    vec3 V = toCam;
    vec3 R = reflected;

    vec3 F0 = vec3(0.04);
    F0 = mix(F0, albedo, metallic);

    vec3 Lo = vec3(0.0);
    for(int i = 0; i < 0; i++)
    {
        vec3 L = normalize(lightPositions[i] - worldPos);
        vec3 H = normalize(V + L);
        float distance = length(lightPositions[i] - worldPos);
        float attenuation = 1.0 / (distance * distance);
        vec3 radiance = lightColors[i] * attenuation;

        float NDF = distributionGGX(N, H, roughness);
        float G   = geometrySmith(N, V, L, roughness);
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);

        vec3 nominator    = NDF * G * F;
        float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
        vec3 specular = nominator / denominator;

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;

        float NdotL = max(dot(N, L), 0.0);

        Lo += (kD * albedo / PI + specular) * radiance * NdotL;// * pointShadow(worldPos);
    }

    if (true)
    {
        vec3 L = sunDirection;
        vec3 H = normalize(V + L);
        vec3 radiance = vec3(10);

        float NDF = distributionGGX(N, H, roughness);
        float G   = geometrySmith(N, V, L, roughness);
        vec3 F    = fresnelSchlick(max(dot(H, V), 0.0), F0);

        vec3 nominator    = NDF * G * F;
        float denominator = 4 * max(dot(N, V), 0.0) * max(dot(N, L), 0.0) + 0.001;
        vec3 specular = nominator / denominator;

        vec3 kS = F;
        vec3 kD = vec3(1.0) - kS;
        kD *= 1.0 - metallic;

        float NdotL = max(dot(N, L), 0.0);

        Lo += (kD * albedo / PI + specular) * radiance * NdotL * sunShadows(shadowSpacePos);
    }

    vec3 F = fresnelSchlickRoughness(max(dot(N, V), 0.0), F0, roughness);

    vec3 kS = F;
    vec3 kD = 1.0 - kS;
    kD *= 1.0 - metallic;

    vec3 irradiance = textureCubeLod(inIrradiance, N, 0).rgb;
    vec3 diffuse = irradiance * albedo;

    const float MAX_REFLECTION_LOD = 4.0;
    vec3 prefilteredColor = textureLod(inPrefilterMap, R,  roughness * MAX_REFLECTION_LOD).rgb;
    vec2 brdf  = texture(brdfLUT, vec2(max(dot(N, V), 0.0), roughness)).rg;
    vec3 specular = prefilteredColor * (F * brdf.x + brdf.y);

    vec3 ambient = (kD * diffuse + specular) * ao;

    vec3 color = ambient + Lo;

    float exposure = 1;
    color = vec3(1.0) - exp(-color * exposure);
    color = pow(color, vec3(1.0/2.2));

    outColor = vec4(color , 1.0);
}
