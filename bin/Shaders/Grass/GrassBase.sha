#shader vertex
#version 130

in vec3 vertexPos;
in vec3 vertexNormal;
in vec4 vertexColor;
in vec2 vertexCoord;

out vec3 fragPos;
out vec3 fragNormal;
out vec2 fragCoord;
out vec4 fragColor;
out vec3 shadowSpacePos;

uniform mat4 uProj;
uniform mat4 uView;
uniform mat4 uModel;
uniform mat4 uShadow;

uniform float time;

//FIXME make this randomass vector into wind

void main()
{
    vec3 wind = normalize(vec3(-1,0,-1)) * sin(time + vertexColor.g);
    wind *= vertexColor.r;

    vec3 worldPos = vec3(uModel * vec4(vertexPos, 1)) + wind;

    gl_Position = uProj * uView * vec4(worldPos, 1);

    shadowSpacePos = vec3(uShadow * vec4(worldPos, 1));

    fragPos = worldPos;
    fragNormal = vertexNormal;
    fragCoord = vertexCoord;
    fragColor = vec4(1);
}

#shader fragment
#version 130

in vec3 fragPos;
in vec3 fragNormal;
in vec2 fragCoord;
in vec4 fragColor;
in vec3 shadowSpacePos;

out vec4 outColor;

uniform sampler2D uImage;
uniform sampler2DShadow uShadowMap;

float sunShadow()
{
    return shadow2D(uShadowMap, vec3(shadowSpacePos.xy, shadowSpacePos.z - 0.0005)).r;
}

vec3 correct(vec3 color)
{
    float gamma = 2.2;
    vec3 mapped = color / (color + vec3(1.0));
    return pow(mapped, vec3(1.0/gamma));
}

void main()
{
    vec3 light = normalize(vec3(1,1,1));

    vec3 ambient = vec3(0.2,0.2,0.3);
    vec3 diffuse = vec3(max(dot(fragNormal, light), 0)) * vec3(2);

    vec3 color = ambient + diffuse * sunShadow();

    vec4 texColor = texture(uImage, fragCoord);
    color *= pow(texColor.rgb, vec3(2.2));

    if (texColor.a < 0.5) discard;

    outColor = vec4(correct(color), 1);
}
